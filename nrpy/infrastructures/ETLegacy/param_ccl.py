from typing import Tuple, Union
import os
import sys


def keep_param__return_type(paramtuple) -> Tuple[bool, str]:
    """
    Determine whether to keep a parameter and its type based on its properties.

    :param paramtuple: Tuple containing parameter details.
    :return: Tuple containing a boolean that says whether to keep the parameter and a string that describes the parameter's type.
    :raises ValueError: If the parameter type is not supported.
    """
    keep_param = True
    typestring = ""

    if paramtuple.module in ("grid", "reference_metric"):
        keep_param = False

    partype = paramtuple.type
    if partype == "bool":
        typestring += "BOOLEAN "
    elif partype == "REAL":
        if paramtuple.defaultval != 1e300:
            typestring += "CCTK_REAL "
        else:
            keep_param = False
    elif partype == "int":
        typestring += "CCTK_INT "
    elif partype == "#define":
        keep_param = False
    elif partype == "char":
        raise ValueError(
            f'Error: parameter {paramtuple.module}::{paramtuple.parname} has unsupported type: "{paramtuple.type}"'
        )
    else:
        raise ValueError(
            f'Error: parameter {paramtuple.module}::{paramtuple.parname} has unsupported type: "{paramtuple.type}"'
        )
    return keep_param, typestring


def output_param_ccl(ThornName: str = "BaikalETK") -> None:
    """
    Generate the content for the param.ccl file and write it to disk.

    :param ThornName: Name of the thorn directory.
    """
    FDorders = (
        Baikal_FDorders_list
        if ThornName != "BaikalVacuum"
        else BaikalVacuum_FDorders_list
    )
    FDorder_default = 4 if 4 in FDorders else FDorders[0]
    if FDorder_default != 4:
        print(
            f"WARNING: 4th-order FD kernel was not output!?! Changing default FD order to {FDorder_default}"
        )

    paramccl_str = ""
    for param in par.glb_Cparams_list:
        keep_param, singleparstring = keep_param__return_type(param)
        if keep_param:
            singleparstring += f'{param.parname} "{param.parname} (see NRPy+ for parameter definition)"\n'
            singleparstring += "{\n"
            if param.type != "bool":
                singleparstring += ' *:* :: "All values accepted. NRPy+ does not restrict the allowed ranges of parameters yet."\n'
            singleparstring += f"}} {param.defaultval}\n\n"
            paramccl_str += singleparstring

    with open(os.path.join(ThornName, "param.ccl"), "w") as file:
        file.write(
            f"""
# This param.ccl file was automatically generated by NRPy+.
#   You are advised against modifying it directly; instead
#   modify the Python code that generates it.

shares: ADMBase
EXTENDS CCTK_KEYWORD evolution_method "evolution_method"
{{  "{ThornName}" :: "" }}

restricted:
CCTK_INT FD_order "Finite-differencing order"
{{"""
        )
        for order in FDorders:
            file.write(f' {order}:{order}   :: "finite-differencing order = {order}"\n')
        file.write(f"}} {FDorder_default}\n\n{paramccl_str}")
